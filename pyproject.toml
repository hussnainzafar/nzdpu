[tool.poetry]
name = "nzdpu-wis"
version = "1.8.22"
description = "The Web Interview System (WIS) component of NZDPU."
authors = ["Sal Borrelli <sb@insomniacdesign.com>"]
readme = "README.md"
packages = [{ include = "app" }, { include = "cli" }]
include = ["alembic.ini", "tests/data/*json"]
[tool.poetry.scripts]
dump_json = "cli.dump_schema:app"
schema_verifier = "cli.schema_verifier:app"

[tool.poetry.dependencies]
async-property = "^0.2.0"
python = "^3.11"
fastapi = "^0.111.0"
mypy = "1.6.0"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.34" }
pydantic = { extras = ["email"], version = "^2.9.0" }
pytest = "^8.2.2"
bcrypt = "^4.0.1"
pyjwt = "2.10.1"
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
asyncpg = "^0.29.0"
aiosqlite = "^0.19.0"
anyio = "^3.7.0"
pytest-asyncio = "^0.24.0"
nest-asyncio="1.6.0"
pytest-benchmark = "^4.0.0"
alembic = "^1.11.1"
jsonschema = "^4.17.3"
firebase-admin = "^6.1.0"
redis = { extras = ["hiredis"], version = "^4.5.5" }
python-magic = "^0.4.27"
pandas = "^2.0.3"
openpyxl = "^3.1.2"
dictdiffer = "^0.9.0"
natsort = "^8.4.0"
unidecode = "^1.3.7"
orjson = "^3.9.15"
python-dotenv = "^1.0.1"
httpx = "^0.27.0"
google = "^3.0.0"
uvicorn = "^0.25.0"
python-multipart = "0.0.18"
tqdm = "^4.62.3"
pydantic-settings = "^2.3.4"
structlog = "^24.4.0"
pytest-docker="^3.1.1"
psycopg2-binary="^2.9.9"
aiodocker = "^0.23.0"
aiofiles = "^24.1.0"
cryptography = "43.0.1"
certifi = "2024.7.4"
urllib3 = "2.2.2"
requests = "2.32"
crypto = "^1.4.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
markers = [
  "firebase: run integration tests against firebase auth emulator (use with --firebase argument)",
  "postgres: mark the test to be using postgresql (use with --postgres argument)"
]
log_level = "WARNING"
log_cli = true
asyncio_default_fixture_loop_scope = "session"

[tool.black]
skip-string-normalization = true
line-length = 79
indent-width = 4
[tool.ruff]
# Same as Black.
line-length = 79
indent-width = 4
exclude = ["jupyter_notebook_config.py"]
select = [
  "E", # pycodestyle errors (settings from FastAPI, thanks, @tiangolo!)
  "W", # pycodestyle warnings
  "F", # pyflakes
  "I", # isort
  "C", # flake8-comprehensions
  "B", # flake8-bugbear
]
ignore = [
  "E501", # line too long, handled by black
  "C901", # too complex
]
[tool.ruff.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]
known-first-party = []

